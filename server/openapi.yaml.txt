openapi: 3.0.0
info:
  title: Informatics Museum Collection Management API
  version: 1.0.0
  description: API for managing the collection of an informatics museum.

servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /objects:
    get:
      summary: Retrieve all objects
      tags:
        - Objects
      responses:
        '200':
          description: A list of objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Object'
        '500':
          description: Failed to retrieve objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new object
      tags:
        - Objects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectInput'
      responses:
        '201':
          description: The newly created object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        '400':
          description: Missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to create object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /objects/{uniqueId}:
    get:
      summary: Retrieve a single object by ID
      tags:
        - Objects
      parameters:
        - in: path
          name: uniqueId
          required: true
          description: The unique ID of the object.
          schema:
            type: string
      responses:
        '200':
          description: The requested object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        '404':
          description: Object not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to retrieve object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing object
      tags:
        - Objects
      parameters:
        - in: path
          name: uniqueId
          required: true
          description: The unique ID of the object to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectUpdateInput'
      responses:
        '200':
          description: The updated object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        '404':
          description: Object not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to update object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an object
      tags:
        - Objects
      parameters:
        - in: path
          name: uniqueId
          required: true
          description: The unique ID of the object to delete.
          schema:
            type: string
      responses:
        '204':
          description: Object deleted successfully.
        '404':
          description: Object not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to delete object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories:
    get:
      summary: Retrieve all categories
      tags:
        - Categories
      responses:
        '200':
          description: A list of categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Failed to retrieve categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new category
      tags:
        - Categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '201':
          description: The newly created category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to create category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories/{categoryId}:
    get:
      summary: Retrieve a single category by ID
      tags:
        - Categories
      parameters:
        - in: path
          name: categoryId
          required: true
          description: The ID of the category to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The requested category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to retrieve category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing category
      tags:
        - Categories
      parameters:
        - in: path
          name: categoryId
          required: true
          description: The ID of the category to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateInput'
      responses:
        '200':
          description: The updated category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to update category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a category
      tags:
        - Categories
      parameters:
        - in: path
          name: categoryId
          required: true
          description: The ID of the category to delete.
          schema:
            type: string
      responses:
        '204':
          description: Category deleted successfully.
        '404':
          description: Category not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to delete category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /subcategories:
    get:
      summary: Retrieve all subcategories
      tags:
        - Subcategories
      responses:
        '200':
          description: A list of subcategories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subcategory'
        '500':
          description: Failed to retrieve subcategories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new subcategory
      tags:
        - Subcategories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcategoryInput'
      responses:
        '201':
          description: The newly created subcategory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subcategory'
        '400':
          description: Missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to create subcategory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /subcategories/{subcategoryId}:
    get:
      summary: Retrieve a single subcategory by ID
      tags:
        - Subcategories
      parameters:
        - in: path
          name: subcategoryId
          required: true
          description: The ID of the subcategory to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The requested subcategory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subcategory'
        '404':
          description: Subcategory not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to retrieve subcategory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing subcategory
      tags:
        - Subcategories
      parameters:
        - in: path
          name: subcategoryId
          required: true
          description: The ID of the subcategory to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcategoryUpdateInput'
      responses:
        '200':
          description: The updated subcategory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subcategory'
        '404':
          description: Subcategory not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to update subcategory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a subcategory
      tags:
        - Subcategories
      parameters:
        - in: path
          name: subcategoryId
          required: true
          description: The ID of the subcategory to delete.
          schema:
            type: string
      responses:
        '204':
          description: Subcategory deleted successfully.
        '404':
          description: Subcategory not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to delete subcategory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /exhibit-groupings:
    get:
      summary: Retrieve all exhibit groupings
      tags:
        - Exhibit Groupings
      responses:
        '200':
          description: A list of exhibit groupings.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExhibitGrouping'
        '500':
          description: Failed to retrieve exhibit groupings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new exhibit grouping
      tags:
        - Exhibit Groupings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExhibitGroupingInput'
      responses:
        '201':
          description: The newly created exhibit grouping.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExhibitGrouping'
        '400':
          description: Missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to create exhibit grouping.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /exhibit-groupings/{groupingId}:
    get:
      summary: Retrieve a single exhibit grouping by ID
      tags:
        - Exhibit Groupings
      parameters:
        - in: path
          name: groupingId
          required: true
          description: The ID of the exhibit grouping to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The requested exhibit grouping.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExhibitGrouping'
        '404':
          description: Exhibit grouping not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to retrieve exhibit grouping.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing exhibit grouping
      tags:
        - Exhibit Groupings
      parameters:
        - in: path
          name: groupingId
          required: true
          description: The ID of the exhibit grouping to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExhibitGroupingUpdateInput'
      responses:
        '200':
          description: The updated exhibit grouping.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExhibitGrouping'
        '404':
          description: Exhibit grouping not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to update exhibit grouping.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an exhibit grouping
      tags:
        - Exhibit Groupings
      parameters:
        - in: path
          name: groupingId
          required: true
          description: The ID of the exhibit grouping to delete.
          schema:
            type: string
      responses:
        '204':
          description: Exhibit grouping deleted successfully.
        '404':
          description: Exhibit grouping not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to delete exhibit grouping.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /acquisitions:
    get:
      summary: Retrieve all acquisitions
      tags:
        - Acquisitions
      responses:
        '200':
          description: A list of acquisitions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Acquisition'
        '500':
          description: Failed to retrieve acquisitions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new acquisition
      tags:
        - Acquisitions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcquisitionInput'
      responses: